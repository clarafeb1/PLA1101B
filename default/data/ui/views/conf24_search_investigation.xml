<form version="1.1" theme="light">
  <label>conf24 Searches Investigation</label>
  <fieldset submitButton="false">
    <input type="text" token="host">
      <label>Searchhead</label>
      <default>sh*</default>
    </input>
    <input type="time" token="time">
      <label></label>
      <default>
        <earliest>-24h@h</earliest>
        <latest>now</latest>
      </default>
    </input>
  </fieldset>
  <row>
    <panel>
      <html>
        For more details, check out <a target="_blank" href="/app/splunk_instance_monitoring/scheduler_activity">Cloud Monitoring Console: Scheduler Activity</a>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Search Load</title>
      <table>
        <search>
          <query>index=_audit action=search info=completed host IN ($host$)
| rex field=provenance "^(?&lt;provenance_group&gt;[^:]+(:[^:]+)?)" 
| stats dc(app) as apps dc(user) as users dc(search_id) as searches sum(total_run_time) as seconds by provenance_group host 
| addinfo 
| eval concurrency_factor = round(seconds / (info_max_time - info_min_time), 2) 
| fields - info_* 
| sort - seconds</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
      <html>
        Look for high concurrency numbers.
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Long Running or High Memory Searches</title>
      <input type="text" token="runtime_threshold">
        <label>Runtime Threshold (s)</label>
        <default>600</default>
      </input>
      <input type="text" token="memory_threshold">
        <label>Memory Threshold (MB)</label>
        <default>4000</default>
      </input>
      <table>
        <search>
          <query>(index=_audit sourcetype=audittrail action=search info=completed) OR (index=_introspection data.search_props.sid::* sourcetype=splunk_resource_usage) host IN ($host$) user!="splunk-system-user" 
| eval mem_used=round('data.mem_used',2), search_id=replace(coalesce('data.search_props.sid',search_id), "^'|'$", "") 
| stats values(savedsearch_name) as search_name values(data.search_props.provenance) as provenance values(data.search_props.app) as app first(host) as host values(user) as user latest(info) as job_status max(mem_used) as "mem_used_mb" values(total_run_time) as total_run_time values(api_et) as timepicker_start values(api_lt) as timepicker_end values(scan_count) as scan_count values(search) as raw_search by search_id 
| eval timepicker_start = strftime(timepicker_start, "%F %T"), timepicker_end = strftime(timepicker_end, "%F %T") 
| search total_run_time&gt;$runtime_threshold$ OR mem_used_mb&gt;$memory_threshold$</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
      <html>
        Work with search owners to make searches more efficient<p/>
Update searches to define indexes and use filters and appropriate time window<p/>
Update searches to utilize tstats, if applicable
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Saved Search Execution Intervals</title>
      <chart>
        <search>
          <query>index=_audit action=search info=granted provenance=scheduler host IN ($host$) 
| timechart span=10s count 
| eval second = strftime(_time, "%S"), minute = strftime(_time, "%M"), class = case(second=0 AND minute%5=0, "5m", second=0, "1m", true(), ""), count_{class} = count 
| fields - class count second minute</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="charting.chart">line</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
      <html>
          Use a default allow_skew to let the scheduler spread out searches <p/>
          Safe for virtually all cases: allow_skew=1m, randomize only the second for minimal deviations<p/>
  Best distribution in most scenarios: allow_skew=5m <p/>
  Alternative check: Monitoring Console → Resource Usage → Deployment → Indexers → 60m timerange → look for CPU patterns
        </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Saved Search Execution Intervals - Alternate Approach #1</title>
      <chart>
        <search>
          <query>index=_audit action=search info=granted provenance=scheduler host IN ($host$) earliest=-4h@h latest=@h | timechart partial=f span=1m count by app</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
      <html>
        <p>Step 1: Look for larger-scale patterns here (top-of-the-hour, every-15-minutes, etc.) and solve them with a big enough default allow_skew.</p>
      </html>
    </panel>
    <panel>
      <title>Saved Search Execution Intervals - Alternate Approach #2</title>
      <chart>
        <search>
          <query>index=_audit action=search info=granted provenance=scheduler host IN ($host$) earliest=-30m@m latest=@m | timechart partial=f span=10s count by app</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
      <html>
        <p>Step 2 (Only if step 1 looks perfectly smooth): Look for small-scale gaps here, which should not exist with allow_skew everywhere. If you have gaps in a busy scheduling environment, allow_skew isn't used everywhere.</p>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Scheduler Search Status</title>
      <chart>
        <search>
          <query>index=_internal host IN ($host$) sourcetype=scheduler (status="completed" OR status="success" OR status="skipped" OR status="continued" OR status="deferred") search_type!="*acceleration" 
| fillnull value="no_sid_yet" sid 
| eval tuple=savedsearch_name . ";" . tostring(round(relative_time(scheduled_time, "@m"), 0)).":::".sid.status 
| dedup tuple 
| eval alert_actions = if(isnull(alert_actions) OR alert_actions == "", "none", alert_actions) 
| timechart partial=f count by status</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Timeranges vs Schedule</title>
      <table>
        <search>
          <query>| rest splunk_server=$host|s$ servicesNS/-/-/saved/searches search="is_scheduled=1" search="disabled=0" f=title f=cron_schedule f=dispatch.earliest_time f=dispatch.latest_time 
| rename title as savedsearch_name 
| fields cron_schedule dispatch.* splunk_server savedsearch_name 
| stats dc(savedsearch_name) as searches by cron_schedule dispatch.earliest_time dispatch.latest_time splunk_server 
| sort - searches
| eval {splunk_server}=searches 
| fields - searches splunk_server</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="drilldown">cell</option>
        <drilldown>
          <link target="_blank">search?q=%7C%20rest%20splunk_server%3D$host|s$%20servicesNS%2F-%2F-%2Fsaved%2Fsearches%20search%3D%22is_scheduled%3D1%22%20search%3D%22disabled%3D0%22%20f%3Dtitle%20f%3Dcron_schedule%20f%3Ddispatch.earliest_time%20f%3Ddispatch.latest_time%20f%3Deai%3Aacl%0A%7C%20rename%20title%20as%20savedsearch_name%20%0A%7C%20fields%20cron_schedule%20dispatch.*%20splunk_server%20eai%3Aacl.app%20savedsearch_name%0A%7C%20where%20cron_schedule%3D$row.cron_schedule|s$%20AND%20'dispatch.earliest_time'%3D$row.dispatch.earliest_time|s$%20AND%20'dispatch.latest_time'%3D$row.dispatch.latest_time|s$&amp;earliest=$time.earliest$&amp;latest=$time.latest$</link>
        </drilldown>
      </table>
      <html>
          Check if the use case warrants overlaps <p/>
  <li>If it does, question “overlap by how much?”</li>
  <li>If it doesn’t, no need to search events multiple times</li>
  Note that searching up to now with zero overlap at all may miss delayed data
        </html>
    </panel>
    <panel>
      <title>Scheduled Searches Without Defined Index</title>
      <table>
        <search>
          <query>| rest splunk_server=$host|s$ servicesNS/-/-/saved/searches f=disabled f=title f=search f=eai:* 
| fields disabled search title splunk_server eai:acl.app 
| search disabled=0 search!="|*" 
| rex field=search "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;direct_index_searched&gt;[^\s,|']*)" max_match=0 
| where isnull(direct_index_searched) 
| rex field=search "`(?&lt;macro_searched&gt;[^`]+)`" max_match=0 
| rex field=search "eventtype\s?=\s?(?&lt;eventtype_searched&gt;[^\s]+)" max_match=0 
| mvexpand macro_searched 
| mvexpand eventtype_searched 
| join macro_searched splunk_server type=left 
    [| rest splunk_server=$host|s$ servicesNS/-/-/admin/macros f=title f=definition 
    | fields title definition splunk_server 
    | rex field=definition "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;macro_index_searched&gt;[^\s|\"|']*)" max_match=0 
    | rex field=definition "eventtype\s?\=\s?\"?(?&lt;macro_defined_eventtype&gt;[^\s|\"|']+)" max_match=0 
    | rex field=definition "`(?&lt;nested_macro&gt;[^`]+)`" max_match=0 
    | mvexpand nested_macro 
    | join nested_macro splunk_server type=left 
        [| rest splunk_server=$host|s$ servicesNS/-/-/admin/macros f=title f=definition 
        | fields title definition splunk_server 
        | rex field=definition "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;nested_macro_index_searched&gt;[^\s|\"|']*)" max_match=0 
        | rex field=definition "eventtype\s?\=\s?\"(?&lt;nested_macro_defined_eventtype&gt;[^\s]+)" max_match=0 
        | fields - definition 
        | rename title as nested_macro] 
    | eval macro_index_searched=case(isnotnull(macro_index_searched) AND isnotnull(nested_macro_index_searched), mvjoin(macro_index_searched,nested_macro_index_searched), isnotnull(macro_index_searched),macro_index_searched,1=1,nested_macro_index_searched) 
    | eval macro_defined_eventtype=case(isnotnull(macro_defined_eventtype) AND isnotnull(nested_macro_defined_eventtype),mvjoin(macro_defined_eventtype,nested_macro_defined_eventtype), isnotnull(macro_defined_eventtype),macro_defined_eventtype,1=1,nested_macro_defined_eventtype) 
    | fields title definition splunk_server macro_defined_eventtype macro_index_searched 
    | stats values(*) as * by title definition splunk_server 
    | rename title as macro_searched definition as macro_definition 
    | join macro_defined_eventtype splunk_server type=left 
        [| rest splunk_server=$host|s$ /servicesNS/-/-/saved/eventtypes f=search f=title 
        | fields - author published id updated 
        | stats values(*) as * by splunk_server title 
        | rename title as macro_defined_eventtype splunk_server as splunk_server 
        | rex field=search "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;macro_eventtype_index_searched&gt;[^\s|\"|']*)" max_match=0 
        | fields - search]] 
| join eventtype_searched splunk_server type=left 
    [| rest splunk_server=$host|s$ /servicesNS/-/-/saved/eventtypes f=search f=title 
    | fields - author published id updated 
    | stats values(*) as * by splunk_server title 
    | rename title as eventtype_searched search as eventtype_definition 
    | rex field=eventtype_definition "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;eventtype_index_searched&gt;[^\s|\"|']*)" max_match=0 
    | rex field=eventtype_definition "eventtype\s?\=\s?\"?(?&lt;nested_eventtype&gt;[^\s|\"|']*)" max_match=0 
    | mvexpand nested_eventtype 
    | join nested_eventtype splunk_server type=left 
        [| rest splunk_server=$host|s$ /servicesNS/-/-/saved/eventtypes f=search f=title 
        | fields - author published id updated 
        | stats values(*) as * by splunk_server title 
        | rename title as nested_eventtype search as nested_eventtype_definition 
        | rex field=nested_eventtype_definition "index((\s?\=\s?\"?)|(\sIN\s))(?&lt;nested_eventtype_index_searched&gt;[^\s|\"|']*)" max_match=0 ] 
    | fields splunk_server eventtype_searched nested_eventtype_index_searched eventtype_index_searched] 
| stats values(*) as * by title search 
| where isnull(eventtype_index_searched) 
| where isnull(nested_eventtype_index_searched) 
| where isnull(macro_index_searched) 
| where isnull(macro_eventtype_index_searched) 
| fields splunk_server title search</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>All Time Scheduled Searches</title>
      <table>
        <search>
          <query>| rest splunk_server=$host|s$ /servicesNS/-/-/saved/searches search="is_scheduled=1" search="disabled=0" f=title f=author f=cron_schedule f=dispatch.earliest_time f=dispatch.latest_time f=eai:acl* f=updated f=qualifiedSearch f=next_scheduled_time f=splunk_server 
| search (dispatch.earliest_time="" OR dispatch.earliest_time="0") 
| stats values(author) as author values(cron_schedule) as cron_schedule values(dispatch.earliest_time) as earliest_time values(dispatch.latest_time) as latest_time values(eai:acl.owner) as owner values(updated) as updated values(qualifiedSearch) as qualifiedSearch values(next_scheduled_time) as next_scheduled_time values(splunk_server) as splunk_server by title eai:acl.app 
| rename eai:acl.app as app 
| regex qualifiedSearch="^\s*(search|tstats) " 
| rex field=qualifiedSearch "earliest=(?P&lt;earliestTime&gt;\S+)" 
| where isnull(earliestTime) 
| fields - earliest_time latest_time earliestTime</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
      <html>
        Some use cases might not hurt anything, such as running `rest` or `inputlookup` searches <br/>
        Work with search owners to update time window <br/>
        Use _index_earliest and _index_latest, if _time is needed to be All Time
      </html>
    </panel>
  </row>
</form>
